// Code generated by db2go. DO NOT EDIT.
// https://github.com/civet148/sqlca

package dataobject

var TableNameUsers = "users" //

const (
	USERS_COLUMN_ID         = "id"
	USERS_COLUMN_NAME       = "name"
	USERS_COLUMN_PHONE      = "phone"
	USERS_COLUMN_SEX        = "sex"
	USERS_COLUMN_EMAIL      = "email"
	USERS_COLUMN_DISABLE    = "disable"
	USERS_COLUMN_BALANCE    = "balance"
	USERS_COLUMN_SEX_NAME   = "sex_name"
	USERS_COLUMN_CREATED_AT = "created_at"
	USERS_COLUMN_UPDATED_AT = "updated_at"
)

type UsersDO struct {
	Id        uint32  `json:"id,omitempty" db:"id" `                                 //auto inc id
	Name      string  `json:"name,omitempty" db:"name" `                             //user name
	Phone     string  `json:"phone,omitempty" db:"phone" `                           //phone number
	Sex       uint8   `json:"sex,omitempty" db:"sex" `                               //user sex
	Email     string  `json:"email,omitempty" db:"email" `                           //email
	Disable   int8    `json:"disable,omitempty" db:"disable" `                       //disabled(0=false 1=true)
	Balance   float64 `json:"balance,omitempty" db:"balance" `                       //balance of decimal
	SexName   string  `json:"sex_name,omitempty" db:"sex_name" `                     //sex name
	CreatedAt string  `json:"created_at,omitempty" db:"created_at" sqlca:"readonly"` //create time
	UpdatedAt string  `json:"updated_at,omitempty" db:"updated_at" sqlca:"readonly"` //update time
}

func (do *UsersDO) GetId() uint32         { return do.Id }
func (do *UsersDO) SetId(v uint32)        { do.Id = v }
func (do *UsersDO) GetName() string       { return do.Name }
func (do *UsersDO) SetName(v string)      { do.Name = v }
func (do *UsersDO) GetPhone() string      { return do.Phone }
func (do *UsersDO) SetPhone(v string)     { do.Phone = v }
func (do *UsersDO) GetSex() uint8         { return do.Sex }
func (do *UsersDO) SetSex(v uint8)        { do.Sex = v }
func (do *UsersDO) GetEmail() string      { return do.Email }
func (do *UsersDO) SetEmail(v string)     { do.Email = v }
func (do *UsersDO) GetDisable() int8      { return do.Disable }
func (do *UsersDO) SetDisable(v int8)     { do.Disable = v }
func (do *UsersDO) GetBalance() float64   { return do.Balance }
func (do *UsersDO) SetBalance(v float64)  { do.Balance = v }
func (do *UsersDO) GetSexName() string    { return do.SexName }
func (do *UsersDO) SetSexName(v string)   { do.SexName = v }
func (do *UsersDO) GetCreatedAt() string  { return do.CreatedAt }
func (do *UsersDO) SetCreatedAt(v string) { do.CreatedAt = v }
func (do *UsersDO) GetUpdatedAt() string  { return do.UpdatedAt }
func (do *UsersDO) SetUpdatedAt(v string) { do.UpdatedAt = v }

/*
CREATE TABLE `users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'auto inc id',
  `name` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'user name',
  `phone` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'phone number',
  `sex` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT 'user sex',
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'email',
  `disable` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'disabled(0=false 1=true)',
  `balance` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT 'balance of decimal',
  `sex_name` varchar(16) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'sex name',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'update time',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `phone` (`phone`)
) ENGINE=InnoDB AUTO_INCREMENT=264 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
*/
