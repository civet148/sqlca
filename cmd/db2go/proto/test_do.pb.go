// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test_do.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassesDO struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClassNo              string   `protobuf:"bytes,3,opt,name=class_no,json=classNo,proto3" json:"class_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClassesDO) Reset()         { *m = ClassesDO{} }
func (m *ClassesDO) String() string { return proto.CompactTextString(m) }
func (*ClassesDO) ProtoMessage()    {}
func (*ClassesDO) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92f51718b7b4e08, []int{0}
}
func (m *ClassesDO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassesDO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassesDO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassesDO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassesDO.Merge(m, src)
}
func (m *ClassesDO) XXX_Size() int {
	return m.Size()
}
func (m *ClassesDO) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassesDO.DiscardUnknown(m)
}

var xxx_messageInfo_ClassesDO proto.InternalMessageInfo

func (m *ClassesDO) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClassesDO) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ClassesDO) GetClassNo() string {
	if m != nil {
		return m.ClassNo
	}
	return ""
}

type UsersDO struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Sex                  int32    `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Email                string   `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Disable              int32    `protobuf:"varint,8,opt,name=disable,proto3" json:"disable,omitempty"`
	Balance              string   `protobuf:"bytes,9,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsersDO) Reset()         { *m = UsersDO{} }
func (m *UsersDO) String() string { return proto.CompactTextString(m) }
func (*UsersDO) ProtoMessage()    {}
func (*UsersDO) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92f51718b7b4e08, []int{1}
}
func (m *UsersDO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDO.Merge(m, src)
}
func (m *UsersDO) XXX_Size() int {
	return m.Size()
}
func (m *UsersDO) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDO.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDO proto.InternalMessageInfo

func (m *UsersDO) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UsersDO) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UsersDO) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UsersDO) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UsersDO) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UsersDO) GetDisable() int32 {
	if m != nil {
		return m.Disable
	}
	return 0
}

func (m *UsersDO) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func init() {
	proto.RegisterType((*ClassesDO)(nil), "proto.ClassesDO")
	proto.RegisterType((*UsersDO)(nil), "proto.UsersDO")
}

func init() { proto.RegisterFile("test_do.proto", fileDescriptor_b92f51718b7b4e08) }

var fileDescriptor_b92f51718b7b4e08 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4e, 0xf3, 0x30,
	0x14, 0x84, 0xe5, 0xb4, 0x69, 0x9a, 0x27, 0xfd, 0xbf, 0x2a, 0x0b, 0x09, 0xc3, 0x22, 0xaa, 0xba,
	0xea, 0x86, 0x76, 0xc1, 0x0d, 0x80, 0x0d, 0x1b, 0x2a, 0x45, 0x62, 0x1d, 0xd9, 0xf1, 0x23, 0xb5,
	0x94, 0xe4, 0x55, 0x71, 0x22, 0x71, 0x1b, 0xae, 0xc3, 0x92, 0x23, 0x40, 0x4e, 0xc0, 0x11, 0x90,
	0x5f, 0xca, 0x8e, 0x95, 0xe7, 0x1b, 0xcf, 0x8c, 0x2c, 0xc3, 0xbf, 0x1e, 0x7d, 0x5f, 0x58, 0xda,
	0x9d, 0x3a, 0xea, 0x49, 0xc6, 0x7c, 0x5c, 0xdf, 0x54, 0xae, 0x3f, 0x0e, 0x66, 0x57, 0x52, 0xb3,
	0xaf, 0xa8, 0xa2, 0x3d, 0xdb, 0x66, 0x78, 0x61, 0x62, 0x60, 0x35, 0xb5, 0x36, 0x07, 0x48, 0xef,
	0x6b, 0xed, 0x3d, 0xfa, 0x87, 0x83, 0xfc, 0x0f, 0x91, 0xb3, 0x4a, 0xac, 0xc5, 0x36, 0xce, 0x23,
	0x67, 0xe5, 0x25, 0x24, 0x83, 0xc7, 0xae, 0x70, 0x56, 0x45, 0x6c, 0x2e, 0x02, 0x3e, 0x5a, 0x79,
	0x05, 0xcb, 0x32, 0xb4, 0x8a, 0x96, 0xd4, 0x6c, 0x2d, 0xb6, 0x69, 0x9e, 0x30, 0x3f, 0xd1, 0xe6,
	0x4d, 0x40, 0xf2, 0xec, 0xb1, 0xfb, 0x6b, 0x4f, 0xc2, 0xbc, 0xd5, 0x0d, 0xf2, 0x58, 0x9a, 0xb3,
	0x96, 0x17, 0x10, 0x9f, 0x8e, 0xd4, 0xe2, 0x79, 0x67, 0x02, 0xb9, 0x82, 0x99, 0xc7, 0x57, 0x35,
	0xe7, 0x6a, 0x90, 0x21, 0x87, 0x8d, 0x76, 0xb5, 0x8a, 0xa7, 0x1c, 0x83, 0x54, 0x90, 0x58, 0xe7,
	0xb5, 0xa9, 0x51, 0x2d, 0x39, 0xfb, 0x8b, 0xe1, 0xc6, 0xe8, 0x5a, 0xb7, 0x25, 0xaa, 0x74, 0x7a,
	0xe1, 0x19, 0xef, 0x56, 0xdf, 0x5f, 0x99, 0x78, 0x1f, 0x33, 0xf1, 0x31, 0x66, 0xe2, 0x73, 0xcc,
	0x84, 0x59, 0xf0, 0x5f, 0xdc, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xee, 0x67, 0xf1, 0x52,
	0x01, 0x00, 0x00,
}

func (this *ClassesDO) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.ClassesDO{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ClassNo: "+fmt.Sprintf("%#v", this.ClassNo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UsersDO) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&proto.UsersDO{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Disable: "+fmt.Sprintf("%#v", this.Disable)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTestDo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ClassesDO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassesDO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassesDO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClassNo) > 0 {
		i -= len(m.ClassNo)
		copy(dAtA[i:], m.ClassNo)
		i = encodeVarintTestDo(dAtA, i, uint64(len(m.ClassNo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintTestDo(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTestDo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersDO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintTestDo(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Disable != 0 {
		i = encodeVarintTestDo(dAtA, i, uint64(m.Disable))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTestDo(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sex != 0 {
		i = encodeVarintTestDo(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintTestDo(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTestDo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTestDo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestDo(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestDo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassesDO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTestDo(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovTestDo(uint64(m.UserId))
	}
	l = len(m.ClassNo)
	if l > 0 {
		n += 1 + l + sovTestDo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UsersDO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTestDo(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTestDo(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovTestDo(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovTestDo(uint64(m.Sex))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTestDo(uint64(l))
	}
	if m.Disable != 0 {
		n += 1 + sovTestDo(uint64(m.Disable))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovTestDo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestDo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestDo(x uint64) (n int) {
	return sovTestDo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassesDO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestDo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassesDO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassesDO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestDo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestDo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestDo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestDo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestDo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestDo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestDo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestDo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestDo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestDo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestDo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestDo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			m.Disable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestDo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestDo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestDo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestDo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestDo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestDo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestDo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestDo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestDo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestDo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestDo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestDo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestDo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestDo = fmt.Errorf("proto: unexpected end of group")
)
